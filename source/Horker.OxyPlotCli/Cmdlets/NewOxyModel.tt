<#@ include file="Common.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
using OxyPlot.Axes;
using OxyPlot.Annotations;
using Horker.OxyPlotCli.Initializers;
using Horker.OxyPlotCli.Styles;

namespace Horker.OxyPlotCli.Cmdlets
{
    [Cmdlet("New", "OxyPlotModel")]
    [Alias("oxy.model", "oxymodel")]
    [OutputType(typeof(PlotModel))]
    public class NewOxyPlotModel : SeriesCmdletBase
    {
        [Parameter(Position = 0, Mandatory = false, ValueFromPipeline = true)]
        public Series Series = null;

        [Parameter(Position = 1, Mandatory = false, ValueFromPipeline = true)]
        public ISeriesInfo SeriesInfo = null;

        [Parameter(Position = 2, Mandatory = false)]
        public Axis[] Axis = null;

        [Parameter(Position = 3, Mandatory = false)]
        public Annotation[] Annotation = null;

        [Parameter(Position = 4, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = 5, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = 6, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = 7, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

        [Parameter(Position = 8, Mandatory = false)]
        public SwitchParameter PassThru = false;

        [Parameter(Position = 9, Mandatory = false)]
        public string Style = null;

        [Parameter(Position = 10, Mandatory = false)]
        public SwitchParameter AsUIElement = false;

        [Parameter(Position = 11, Mandatory = false)]
        public SwitchParameter Show = false;

        [Parameter(Position = 12, Mandatory = false)]
        public SwitchParameter ReuseWindow = false;

<#
    var position = 13;
    foreach (var prop in EnumerateProperties(typeof(PlotModel)))
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
    }

    foreach (var prop in AxisProperty.Enumerate())
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ax<#= prop.Name #>;

<#
    }

    foreach (var prop in AxisProperty.Enumerate())
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ay<#= prop.Name #>;

<#
    }
#>
        private List<Series> _seriesList;
        private List<ISeriesInfo> _seriesInfoList;

        protected override void BeginProcessing()
        {
            _seriesList = new List<Series>();
            _seriesInfoList = new List<ISeriesInfo>();
        }

        protected override void ProcessRecord()
        {
            if (Series != null)
                _seriesList.Add(Series);

            if (SeriesInfo != null)
                _seriesInfoList.Add(SeriesInfo);
        }

        protected override void EndProcessing()
        {
            var bp = MyInvocation.BoundParameters;
            var style = TypeAdaptors.Style.ConvertFrom(Style);

            var model = PlotModelInitializer.Create(_seriesInfoList, style);

<#
    foreach (var prop in EnumerateProperties(typeof(PlotModel)))
    {
#>
            if (bp.ContainsKey("<#= prop.Name #>")) model.<#= prop.Name #> = <#= prop.ConversionString #>;
<#
    }
#>

            if (Axis != null)
            {
                foreach (var a in Axis)
                    model.Axes.Add(a);
            }

            if (Annotation != null)
            {
                foreach (var a in Annotation)
                    model.Annotations.Add(a);
            }

            var si = _seriesInfoList.Count > 0 ? _seriesInfoList[0] : null;

            PostProcess(model, si, OutFile, OutWidth, OutHeight, SvgIsDocument, PassThru, style, AsUIElement, Show, ReuseWindow);
        }
    }
}
