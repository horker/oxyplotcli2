<#@ include file="Common.tt" #>
<#
var position = 0;
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
using OxyPlot.Axes;
using OxyPlot.Annotations;
using Horker.OxyPlotCli.Initializers;
using Horker.OxyPlotCli.Styles;

namespace Horker.OxyPlotCli.Cmdlets
{
    [Cmdlet("New", "OxyPlotModel")]
    [Alias("oxy.model", "oxymodel")]
    [OutputType(typeof(PlotModel))]
    public class NewOxyPlotModel : SeriesCmdletBase
    {
        [Parameter(Position = <#= position++ #>, Mandatory = false, ValueFromPipeline = true)]
        public object InputObject = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public Series[] Series = new Series[0];

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public ISeriesInfo[] SeriesInfo = new ISeriesInfo[0];

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public PlotModel PlotModel = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public Axis[] Axis = new Axis[0];

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public Annotation[] Annotation = new Annotation[0];

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter PassThru = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string Style = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter AsUIElement = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter Show = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter ReuseWindow = false;

<#
    foreach (var prop in EnumerateProperties(typeof(PlotModel)))
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
    }

    foreach (var prop in AxisProperty.Enumerate())
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ax<#= prop.Name #>;

<#
    }

    foreach (var prop in AxisProperty.Enumerate())
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ay<#= prop.Name #>;

<#
    }
#>
        private List<Series> _seriesList;
        private List<ISeriesInfo> _seriesInfoList;
        private PlotModel _plotModel;

        protected override void BeginProcessing()
        {
            _seriesList = new List<Series>(Series);
            _seriesInfoList = new List<ISeriesInfo>(SeriesInfo);
            _plotModel = PlotModel;
        }

        protected override void ProcessRecord()
        {
            if (InputObject is PSObject pso)
                InputObject = pso.BaseObject;

            if (InputObject is Series s)
                _seriesList.Add(s);
            else if (InputObject is ISeriesInfo si)
                _seriesInfoList.Add(si);
            else if (InputObject is PlotModel p)
                _plotModel = p;
            else if (InputObject is Array a)
            {
                foreach (var e in a)
                {
                    var value = e;
                    if (value is PSObject ppso)
                        value = ppso.BaseObject;

                    if (value is Series ss)
                        _seriesList.Add(ss);
                    else if (value is ISeriesInfo ssi)
                        _seriesInfoList.Add(ssi);
                    else if (value is PlotModel pp)
                        _plotModel = pp;
                }
            }
            else
                throw new ArgumentException($"Unknown type of pipleline value: {InputObject.GetType().FullName}");
        }

        protected override void EndProcessing()
        {
            var bp = MyInvocation.BoundParameters;
            var style = TypeAdaptors.Style.ConvertFrom(Style);

            var model = _plotModel ?? new PlotModel();

            PlotModelInitializer.Create(model, _seriesInfoList, style);

<#
    foreach (var prop in EnumerateProperties(typeof(PlotModel)))
    {
#>
            if (bp.ContainsKey("<#= prop.Name #>")) model.<#= prop.Name #> = <#= prop.ConversionString #>;
<#
    }
#>

            foreach (var a in Axis)
                model.Axes.Add(a);

            foreach (var a in Annotation)
                model.Annotations.Add(a);

            foreach (var s in _seriesList)
                model.Series.Add(s);

            var si2 = _seriesInfoList.Count > 0 ? _seriesInfoList[0] : null;

            PostProcess(model, si2, OutFile, OutWidth, OutHeight, SvgIsDocument, PassThru, style, AsUIElement, Show, ReuseWindow);
        }
    }
}
