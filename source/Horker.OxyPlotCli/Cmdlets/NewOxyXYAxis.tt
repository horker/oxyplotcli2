<#@ include file="Common.tt" #>
<#
var axes = typeof(OxyPlot.Axes.LinearAxis).Assembly.GetTypes().Where(t => (t.Name.EndsWith("Axis") || t.Name.EndsWith("Annotation")) && !t.IsAbstract).ToArray();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
using Horker.OxyPlotCli.Styles;

namespace Horker.OxyPlotCli.Cmdlets
{
<#
foreach (var axisType in axes)
{
	var name = axisType.Name;
	var fullName = axisType.FullName;
	string shortName;
    if (name.EndsWith("Axis"))
        shortName = "axis." + Helper.ToLowerCamelCase(name.Replace("Axis", ""));
    else
        shortName = "ann." + Helper.ToLowerCamelCase(name.Replace("Annotation", ""));
#>
    [Cmdlet("New", "Oxy<#= name #>")]
    [Alias("oxy.<#= shortName #>")]
    [OutputType(typeof(<#= fullName #>))]
    public class NewOxy<#= name #> : PSCmdlet
    {
<#
	var position = 0;
	foreach (var prop in EnumerateProperties(axisType))
	{
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
	}
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public PlotModel AddTo = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter PassThru = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string Style = null;

        protected override void BeginProcessing()
        {
            var bp = MyInvocation.BoundParameters;
            var style = TypeAdaptors.Style.ConvertFrom(Style);

            var obj = new <#= fullName #>();
            style.ApplyStyleTo(obj);

<#
	foreach (var prop in EnumerateProperties(axisType))
	{
#>
            if (bp.ContainsKey("<#= prop.Name #>")) obj.<#= prop.Name #> = <#= prop.ConversionString #>;
<#
	}
#>

            if (AddTo != null)
            {
<#
if (name.EndsWith("Axis"))
{
#>
                AddTo.Axes.Add(obj);
<#
}
else
{
#>
                AddTo.Annotations.Add(obj);
<#
}
#>
            
                if (PassThru)
                    WriteObject(obj);
            }
            else
            {
                WriteObject(obj);
            }
        }
    }

<#
}
#>
}
