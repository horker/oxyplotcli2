<#@ include file="Common.tt" #>
<#@ import namespace="Horker.OxyPlotCli" #>
<#@ import namespace="Horker.OxyPlotCli.SeriesBuilders" #>
<#
var assembly = typeof(LineSeriesBuilder).Assembly;
var builderTypes = assembly.DefinedTypes.Where(x => x.Name.EndsWith("SeriesBuilder") && !x.IsAbstract && !x.Name.Contains("Function") && !x.Name.Contains("HeatMap"));

// Uncomment this line to skip template generating.
// builderTypes = new TypeInfo[0];
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Management.Automation;
using OxyPlot;
using OxyPlot.Series;
using Horker.OxyPlotCli.SeriesBuilders;
using Horker.OxyPlotCli.Initializers;
using Horker.OxyPlotCli.Styles;

namespace Horker.OxyPlotCli.Cmdlets
{
<#
foreach (var builderType in builderTypes)
{
    var builderInstance = (ISeriesBuilder)builderType.AsType().GetConstructor(new Type[0]).Invoke(new object[0]);
    var baseType = builderType.BaseType;
    var seriesType = baseType.GenericTypeArguments[0];

    var name = seriesType.Name;
    var pointItemNames = (string[])builderType.GetMethod("get_DataPointItemNames").Invoke(builderInstance, null);
    var pointItemMandatoriness = (bool[])builderType.GetMethod("get_DataPointItemMandatoriness").Invoke(builderInstance, null);
    var aliases = "\"" + string.Join("\", \"", (string[])builderType.GetMethod("get_Aliases").Invoke(builderInstance, null)) + "\"";

    var pointItemTypes = baseType.GenericTypeArguments.Where((x, i) => i >= 2).Select(t => TypeAdaptorHelper.GetAdaptorType(t)).ToArray();
    var itemCount = pointItemNames.Length;
#>
    [Cmdlet("New", "Oxy<#= name #>")]
    [Alias(<#= aliases #>)]
    [OutputType(typeof(SeriesInfo<<#= name #>>))]
    public class NewOxy<#= name #> : SeriesCmdletBase
    {
        [Parameter(Position = 0, Mandatory = false, ValueFromPipeline = true)]
        public PSObject InputObject;

<#
    int position = 1;
    for (var i = 0; i < itemCount; ++i)
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string <#= pointItemNames[i] #>Name = "<#= pointItemNames[i] #>";

<#
    }
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string GroupName = null;

<#
    for (var i = 0; i < itemCount; ++i)
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= pointItemTypes[i] #>[] <#= pointItemNames[i] #>;

<#
    }
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public object[] Group = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public PlotModel AddTo = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter PassThru = false;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string Style = null;

<#
    foreach (var prop in EnumerateProperties(seriesType))
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
    }

    if (builderInstance.DefaultAxisTypes[0] != null)
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string AxType;

<#
        foreach (var prop in AxisProperty.Enumerate())
        {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ax<#= prop.Name #>;

<#
        }
    }

    if (builderInstance.DefaultAxisTypes[1] != null)
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string AyType;

<#
        foreach (var prop in AxisProperty.Enumerate())
        {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Ay<#= prop.Name #>;

<#
        }
    }

    if (builderInstance.DefaultAxisTypes[2] != null)
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string AzType;

<#
        foreach (var prop in AxisProperty.Enumerate())
        {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> Az<#= prop.Name #>;

<#
        }
    }
#>
        private <#= name #>Builder _builder;

        private void AssignParameters(<#= name #> series, Dictionary<string, object> bp)
        {
<#
    foreach (var prop in EnumerateProperties(seriesType))
    {
#>
            if (bp.ContainsKey("<#= prop.Name #>")) series.<#= prop.Name #> = <#= prop.ConversionString #>;
<#
    }
#>
        }

        protected override void BeginProcessing()
        {
            _builder = new <#= name #>Builder();
            _builder.ReadBoundParameters(MyInvocation.BoundParameters);
        }

        protected override void ProcessRecord()
        {
            // ProcessRecord is called once when InputObject is not given at all.
            if (InputObject == null)
                return;

            _builder.ReadPSObject(InputObject);
        }

        protected override void EndProcessing()
        {
            var bp = MyInvocation.BoundParameters;
            var style = TypeAdaptors.Style.ConvertFrom(Style);

            var si = _builder.CreateSeriesInfo(style);

            foreach (var s in si.Series)
                AssignParameters(s, bp);

            PostProcess(AddTo, si, OutFile, OutWidth, OutHeight, SvgIsDocument, PassThru, style);
        }
    }

<#
}
#>
}
