<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(ProjectDir)..\bin\Debug\OxyPlot.dll" #>
<#@ assembly name="$(ProjectDir)..\bin\Debug\Horker.PSOxyPlot.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="OxyPlot" #>
<#@ import namespace="OxyPlot.Series" #>
<#@ include file="Common.tt" #>
<#@ include file="Definitions.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Management.Automation;
using OxyPlot;
using OxyPlot.Series;

namespace Horker.PSOxyPlot
{
<#
foreach (var def in Definitions.Series)
{
	var name = def.Type.Name;
#>
    [Cmdlet("New", "Oxy<#= name #>")]
    [Alias("oxy.<#= def.ShortName #>")]
    [OutputType(typeof(<#= name #>))]
    public class NewOxy<#= name #> : PSCmdlet
    {
        [Parameter(ParameterSetName = "ByPipeline", Position = 0, Mandatory = true, ValueFromPipeline = true)]
        public PSObject InputObject;

<#
	int position = 1;
	var pointDefs = def.PointDefinitions;
	foreach (var pd in pointDefs)
	{
#>
        [Parameter(ParameterSetName = "ByPipeline", Position = <#= position++ #>, Mandatory = <#= pd.Mandatory.ToString().ToLower() #>)]
        public string <#= pd.Name #>Name = "<#= pd.Name #>";

<#
	}
#>
        [Parameter(ParameterSetName = "ByPipeline", Position = <#= position++ #>, Mandatory = false)]
        public string GroupName = null;

<#
	foreach (var pd in pointDefs)
	{
#>
        [Parameter(ParameterSetName = "ByArray", Position = <#= position++ #>, Mandatory = <#= pd.Mandatory.ToString().ToLower() #>)]
        public <#= pd.Type #>[] <#= pd.Name #>;

<#
	}
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public PlotModel AddTo = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

<#
	foreach (var prop in EnumerateProperties(def.Type, Definitions.TypeAdaptors))
	{
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
	}
#>
        private Dictionary<string, List<<#= def.PointType #>>> _points;

		private static readonly string DEFAULT_GROUP_NAME = "no groups!!??#$%__";

		private void AssignParameters(<#= name #> series, Dictionary<string, object> bp)
		{
<#
	foreach (var prop in EnumerateProperties(def.Type))
	{
#>
			if (bp.ContainsKey("<#= prop.Name #>")) series.<#= prop.Name #> = <#= prop.Name #>;
<#
	}
#>
		}

        protected override void BeginProcessing()
        {
            _points = new Dictionary<string, List<<#= def.PointType #>>>();
        }

        protected override void ProcessRecord()
        {
			// ProcessRecord is called once when InputObject is not given at all.
			if (InputObject == null)
				return;

	        string group = DEFAULT_GROUP_NAME;
            if (!string.IsNullOrEmpty(GroupName))
            {
                var g = InputObject.Properties.Match(GroupName);
                if (g.Count > 0)
                    group = g[0].Value.ToString();
            }

			List<<#= def.PointType #>> list;
			if (!_points.TryGetValue(group, out list))
			{
				list = new List<<#= def.PointType #>>();
				_points.Add(group, list);
			}

			var point = PointFactory.Create<#= name #>Point(MyInvocation.BoundParameters, InputObject);
            list.Add(point);
        }

        protected override void EndProcessing()
        {
			var bp = MyInvocation.BoundParameters;

			PlotModel model = AddTo;
			if (model == null && bp.ContainsKey("OutFile"))
				model = new PlotModel();

			if (ParameterSetName == "ByPipeline")
			{
				foreach (var entry in _points)
				{
					var series = new <#= name #>();

					if (entry.Key != DEFAULT_GROUP_NAME)
						series.Title = entry.Key;

					AssignParameters(series, bp);

					foreach (var p in entry.Value)
						series.Points.Add(p);

					if (model != null)
						model.Series.Add(series);
					else
						WriteObject(series);
				}
			}
			else
			{
				var series = new <#= name #>();
				AssignParameters(series, bp);
				PointFactory.Add<#= name #>Points(series, bp);

				if (model != null)
					model.Series.Add(series);
				else
					WriteObject(series);
			}

			if (bp.ContainsKey("OutFile"))
				ModelExporter.Export(model, OutFile, OutWidth, OutHeight, SvgIsDocument);
        }
    }

<#
}
#>
}