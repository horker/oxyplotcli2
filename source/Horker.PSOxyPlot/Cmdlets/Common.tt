<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(ProjectDir)..\bin\Debug\OxyPlot.dll" #>
<#@ assembly name="$(ProjectDir)..\bin\Debug\Horker.PSOxyPlot.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="OxyPlot" #>
<#@ import namespace="OxyPlot.Series" #>
<#+
private static class Helper
{
    public static string FixTypeName(Type type)
    {
        var t = type.ToString();
        t = Regex.Replace(t, @"`\d\[", "<");

        var s = new StringBuilder();
        s.Append(t[0]);
        for (var i = 1; i < t.Length; ++i)
        {
            if (t[i-1] != '[' && t[i-1] != ',' && t[i] == ']')
                s.Append('>');
            else
                s.Append(t[i]);
        }

        return s.ToString();
    }

    public static string ToLowerCamelCase(string s)
    {
        return Char.ToLower(s[0]) + s.Substring(1);
    }
}

private static class TypeAdaptorHelper
{
	public static readonly Tuple<Type, Type, string>[] TypeAdaptors = new Tuple<Type, Type, string>[]
    {
        // Builtin types
		Tuple.Create(typeof(double), typeof(Horker.PSOxyPlot.TypeAdaptors.Double), "{0}"),
		Tuple.Create(typeof(double[]), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "Horker.PSOxyPlot.TypeAdaptors.Double.ConvertArray({0})"),
		Tuple.Create(typeof(double[,]), typeof(object), "Horker.PSOxyPlot.TypeAdaptors.TwoDimensionalArray.ConvertFrom({0})"),
		Tuple.Create(typeof(bool), typeof(Horker.PSOxyPlot.TypeAdaptors.Bool), "{0}"),

        // OxyPlot types
		Tuple.Create(typeof(OxyPlot.OxyColor), typeof(Horker.PSOxyPlot.TypeAdaptors.OxyColor), "{0}"),
		Tuple.Create(typeof(OxyPlot.OxyColor[]), typeof(Horker.PSOxyPlot.TypeAdaptors.OxyColor[]), "Horker.PSOxyPlot.TypeAdaptors.OxyColor.ConvertArray({0})"),
		Tuple.Create(typeof(OxyPlot.OxyPalette), typeof(object[]), "new Horker.PSOxyPlot.TypeAdaptors.OxyPalette({0})"),
		Tuple.Create(typeof(OxyPlot.OxyThickness), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "new Horker.PSOxyPlot.TypeAdaptors.OxyThickness({0})"),
		Tuple.Create(typeof(OxyPlot.DataPoint), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "new Horker.PSOxyPlot.TypeAdaptors.DataPoint({0})"),
		Tuple.Create(typeof(OxyPlot.ScreenPoint), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "new Horker.PSOxyPlot.TypeAdaptors.ScreenPoint({0})"),
		Tuple.Create(typeof(OxyPlot.ScreenPoint[]), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "Horker.PSOxyPlot.TypeAdaptors.ScreenPoint.ConvertArray({0})"),
		Tuple.Create(typeof(OxyPlot.ScreenVector), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "new Horker.PSOxyPlot.TypeAdaptors.ScreenVector({0})"),
		Tuple.Create(typeof(OxyPlot.ScreenVector[]), typeof(Horker.PSOxyPlot.TypeAdaptors.Double[]), "Horker.PSOxyPlot.TypeAdaptors.ScreenVector.ConvertArray({0})"),
        Tuple.Create(typeof(OxyPlot.OxyImage), typeof(Horker.PSOxyPlot.TypeAdaptors.OxyImage), "{0}"),
        Tuple.Create(typeof(OxyPlot.PlotLength), typeof(Horker.PSOxyPlot.TypeAdaptors.PlotLength), "{0}"),
        Tuple.Create(typeof(OxyPlot.IInterpolationAlgorithm), typeof(Horker.PSOxyPlot.TypeAdaptors.InterpolationAlgorithm), "{0}.Value")
    };

	public static Type GetAdaptorType(Type type)
	{
        var a = TypeAdaptors.Where(t => t.Item1 == type).ToArray();
        if (a.Length > 0)
			return a[0].Item2;
		return type;
	}

	public static string GetConversionString(Type type)
	{
        var a = TypeAdaptors.Where(t => t.Item1 == type).ToArray();
        if (a.Length > 0)
            return a[0].Item3;
        else
            return "{0}";
	}
}

private class ObjectProperty
{
	public string Name { get; set; }
	public Type Type { get; set; }
	public string TypeName { get; set; }
    public string ConversionString { get; set; }
}

private IEnumerable<ObjectProperty> EnumerateProperties(Type type, Tuple<Type, Type> typeAdaptors = null)
{
	foreach (var prop in type.GetProperties())
	{
		if (!prop.CanWrite || prop.SetMethod == null || !prop.SetMethod.IsPublic)
			continue;

		var propType = TypeAdaptorHelper.GetAdaptorType(prop.PropertyType);

		var typeName = Helper.FixTypeName(propType);
		var propName = prop.Name;
        var conversionString = string.Format(TypeAdaptorHelper.GetConversionString(prop.PropertyType), propName);

		var op = new ObjectProperty()
		{
			Name = propName,
			Type = type,
			TypeName = typeName,
            ConversionString = conversionString
		};

		yield return op;
	}
}

private class AxisProperty
{
    public string Name;
    public Type Type;
    public string TypeName => Helper.FixTypeName(Type);

    public static IEnumerable<AxisProperty> Enumerate()
    {
        var nameSet = new HashSet<string>();

        foreach (var t in typeof(OxyPlot.Axes.LinearAxis).Assembly.GetTypes())
        {
            if (!t.Name.EndsWith("Axis") || !t.IsPublic || t.IsAbstract)
                continue;

            foreach (var prop in t.GetProperties())
            {
                if (!prop.CanWrite || prop.SetMethod == null || !prop.SetMethod.IsPublic)
                    continue;

                if (nameSet.Contains(prop.Name))
                    continue;
                nameSet.Add(prop.Name);

                var ap = new AxisProperty()
                {
                    Name = prop.Name,
                    Type = TypeAdaptorHelper.GetAdaptorType(prop.PropertyType)
                };

                yield return ap;
            }
        }
    }
}
#>