<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ include file="Common.tt" #>
<#@ include file="Definitions.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;

namespace Horker.PSOxyPlot
{
    [Cmdlet("New", "OxyModel")]
    [Alias("oxy.model")]
    [OutputType(typeof(PlotModel))]
    public class NewOxyModel : PSCmdlet
    {
        [Parameter(Position = 0, Mandatory = false)]
        public Series[] Series = new Series[0];

<#
	var position = 0;
	foreach (var prop in EnumerateProperties(typeof(PlotModel), TypeAdaptorHelper.TypeAdaptors))
	{
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
	}
#>
        protected override void BeginProcessing()
        {
			var bp = MyInvocation.BoundParameters;
            var model = new PlotModel();

<#
	foreach (var prop in EnumerateProperties(typeof(PlotModel)))
	{
#>
            if (bp.ContainsKey("<#= prop.Name #>")) model.<#= prop.Name #> = <#= prop.Name #>;
<#
	}
#>

            foreach (var s in Series)
                model.Series.Add(s);

            WriteObject(model);
        }
    }
}
