<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ include file="Common.tt" #>
<#@ include file="Definitions.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using OxyPlot;
using OxyPlot.Series;
using OxyPlot.Axes;
using Horker.PSOxyPlot.ObjectFactories;

namespace Horker.PSOxyPlot
{
    [Cmdlet("New", "OxyPlotModel")]
    [Alias("oxy.model")]
    [OutputType(typeof(PlotModel))]
    public class NewOxyPlotModel : PSCmdlet
    {
        [Parameter(Position = 0, Mandatory = false, ValueFromPipeline = true)]
        public Series Series = null;

        [Parameter(Position = 1, Mandatory = false, ValueFromPipeline = true)]
        public ISeriesInfo SeriesInfo = null;

        [Parameter(Position = 2, Mandatory = false)]
        public Axis[] Axis = null;

        [Parameter(Position = 2, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = 3, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = 4, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = 5, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

<#
    var position = 6;
    foreach (var prop in EnumerateProperties(typeof(PlotModel), TypeAdaptorHelper.TypeAdaptors))
    {
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
    }
#>
        private PlotModel _model;

        protected override void BeginProcessing()
        {
            _model = new PlotModel();

            if (Axis != null)
                foreach (var a in Axis)
                    _model.Axes.Add(a);
        }

        protected override void ProcessRecord()
        {
            if (Series != null)
                _model.Series.Add(Series);

            if (SeriesInfo != null)
            {
                AxisInitializer.WithSeriesInfo(_model, SeriesInfo);
                foreach (var s in SeriesInfo.Series)
                    _model.Series.Add(s);
            }
        }

        protected override void EndProcessing()
        {
            var bp = MyInvocation.BoundParameters;

<#
    foreach (var prop in EnumerateProperties(typeof(PlotModel)))
    {
#>
            if (bp.ContainsKey("<#= prop.Name #>")) _model.<#= prop.Name #> = <#= prop.Name #>;
<#
    }
#>

            if (bp.ContainsKey("OutFile"))
                ModelExporter.Export(_model, OutFile, OutWidth, OutHeight, SvgIsDocument);
            else
                WriteObject(_model);
        }
    }
}
