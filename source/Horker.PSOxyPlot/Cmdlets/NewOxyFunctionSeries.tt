<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ include file="Common.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Management.Automation;
using OxyPlot;
using OxyPlot.Series;
using Horker.PSOxyPlot.ObjectFactories;

namespace Horker.PSOxyPlot
{
    [Cmdlet("New", "OxyFunctionSeries")]
    [Alias("oxy.function", "oxy.func", "oxyfunc")]
    [OutputType(typeof(FunctionSeries))]
    public class NewOxyFunctionSeries : PSCmdlet
    {
        [Parameter(ParameterSetName = "Explicit", Position = 0, Mandatory = true)]
        public Horker.PSOxyPlot.TypeAdaptors.ScriptBlock[] F = null;

        [Parameter(ParameterSetName = "Explicit", Position = 1, Mandatory = false)]
        public double X0 = -1;

        [Parameter(ParameterSetName = "Explicit", Position = 2, Mandatory = false)]
        public double X1 = 1;

        [Parameter(ParameterSetName = "Implicit", Position = 0, Mandatory = true)]
        public Horker.PSOxyPlot.TypeAdaptors.ScriptBlock[] Fx = null;

        [Parameter(ParameterSetName = "Implicit", Position = 1, Mandatory = true)]
        public Horker.PSOxyPlot.TypeAdaptors.ScriptBlock[] Fy = null;

        [Parameter(ParameterSetName = "Implicit", Position = 2, Mandatory = false)]
        public double T0 = 0;

        [Parameter(ParameterSetName = "Implicit", Position = 3, Mandatory = false)]
        public double T1 = 1;

        [Parameter(Position = 4, Mandatory = false)]
        public double N  = 100;

        [Alias("Dt")]
        [Parameter(Position = 5, Mandatory = false)]
        public double Dx  =  double.NaN;

        [Parameter(Position = 6, Mandatory = false)]
        public PlotModel AddTo = null;

        [Parameter(Position = 7, Mandatory = false)]
        public string OutFile = null;

        [Parameter(Position = 8, Mandatory = false)]
        public int OutWidth = 800;

        [Parameter(Position = 9, Mandatory = false)]
        public int OutHeight = 600;

        [Parameter(Position = 10, Mandatory = false)]
        public SwitchParameter SvgIsDocument = false;

        [Parameter(Position = 11, Mandatory = false)]
        public SwitchParameter PassThru = false;

<#
var position = 11;
foreach (var prop in EnumerateProperties(typeof(FunctionSeries)))
{
#>
        [Parameter(Position = <#= position++ #>, Mandatory = false)]
        public <#= prop.TypeName #> <#= prop.Name #>;

<#
}
#>
        private void AssignParameters(FunctionSeries series, Dictionary<string, object> bp)
        {
<#
    foreach (var prop in EnumerateProperties(typeof(OxyPlot.Series.FunctionSeries)))
    {
#>
            if (bp.ContainsKey("<#= prop.Name #>")) series.<#= prop.Name #> = <#= prop.ConversionString #>;
<#
    }
#>
        }

        protected override void BeginProcessing()
        {
            var si = new SeriesInfo<FunctionSeries>();

            var bp = MyInvocation.BoundParameters;

            bool isExplicit = ParameterSetName == "Explicit";
            if (double.IsNaN(Dx))
            {
                if (isExplicit)
                    Dx = (X1 - X0) / (N - 1);
                else
                    Dx = (T1 - T0) / (N - 1);
            }

            si.Series = new List<FunctionSeries>();
            if (isExplicit)
            {
				foreach (var f in F)
				{
					var series = new FunctionSeries();
					series.Title = f.ToString();
                    AssignParameters(series, bp);
                    si.Series.Add(series);

                    f.SetParameterName("x");
					for (var i = X0; i <= X1 + Dx * .5; i += Dx)
					{
						var y = f.Invoke(i);
						series.Points.Add(new DataPoint(i, y));
					}
                }
            }
            else
            {
				for (var i = 0; i < Fx.Length; ++i)
				{
					var series = new FunctionSeries();
					series.Title = Fx[i].ToString() + ", " + Fy[i].ToString();
                    AssignParameters(series, bp);
                    si.Series.Add(series);

                    Fx[i].SetParameterName("t");
                    Fy[i].SetParameterName("t");
                    for (var j = T0; j <= T1 + Dx * .5; j += Dx)
                    {
                        var x = Fx[i].Invoke(j);
                        var y = Fy[i].Invoke(j);
                        series.Points.Add(new DataPoint(x, y));
                    }
                }
            }

            PlotModel model = AddTo;
            if (model == null && bp.ContainsKey("OutFile"))
                model = ObjectFactory.CreatePlotModel(si);

            if (model != null)
            {
                foreach (var s in si.Series)
                    model.Series.Add(s);

                if (bp.ContainsKey("OutFile"))
                {
                    ModelExporter.Export(model, OutFile, OutWidth, OutHeight, SvgIsDocument);
                    if (!PassThru)
                        return;
                }

                WriteObject(model);
            }
            else
                WriteObject(si);
        }
    }
}
